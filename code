#include <iostream>
#include <string>
#include <cstdlib>
#include <ctime>

using namespace std;

void PLAYTITLE();
int getNumberOfPlayers();
void GAMESTART(int numPlayers);
void delay(int seconds);
void FirstRound(int numPlayers, string deck[], int playerPoints[]);
int CHOOSEYOURCARD(string playerHand[], int handSize);
void shuffleDeck(string deck[], int size);
int determineWinner(string playedCards[], int numPlayers);
void OtherRounds(int numPlayers, string deck[], int playerPoints[]);


int main() {

   // Seed the random number generator
    srand((unsigned int)time(0));

    PLAYTITLE();
    cout << "\nPress Enter to start the game..." << endl;

    // Wait for the user to press Enter
    cin.ignore(); // Clears the input buffer and waits for Enter

    cout << "Starting the game..." << endl;

    // Wait for 2 seconds
    delay(2);

    // Get the number of players
    int numPlayers = getNumberOfPlayers();

    // Start the game with the specified number of players
    GAMESTART(numPlayers);

    return 0;
}

void PLAYTITLE() {
    cout << "Welcome to...\n\n\n" << endl;
    cout << " .----------------.  .----------------.  .----------------.  .----------------.  .----------------. " << endl;
    cout << "| .--------------. || .--------------. || .--------------. || .--------------. || .--------------. |" << endl;
    cout << "| |    ______    | || | _____  _____ | || |  _______     | || |  ___  ____   | || |      __      | |" << endl;
    cout << "| |  .' ___  |   | || ||_   _||_   _|| || | |_   __ \\    | || | |_  ||_  _|  | || |     /  \\     | |" << endl;
    cout << "| | / .'   \\_|   | || |  | |    | |  | || |   | |__) |   | || |   | |_/ /    | || |    / /\\ \\    | |" << endl;
    cout << "| | | |    ____  | || |  | '    ' |  | || |   |  __ /    | || |   |  __'.    | || |   / ____ \\   | |" << endl;
    cout << "| | \\ `.___]  _| | || |   \\ `--' /   | || |  _| |  \\ \\_  | || |  _| |  \\ \\_  | || | _/ /    \\ \\_ | |" << endl;
    cout << "| |  `._____.'   | || |    `.__.'    | || | |____| |___| | || | |____||____| | || ||____|  |____|| |" << endl;
    cout << "| |              | || |              | || |              | || |              | || |              | |" << endl;
    cout << "| '--------------' || '--------------' || '--------------' || '--------------' || '--------------' |" << endl;
    cout << " '----------------'  '----------------'  '----------------'  '----------------'  '----------------' " << endl;

    cout << "Welcome to the card game against AI!" << endl;
    cout << "Each player is dealt 6 cards from a shuffled deck of 52 cards." << endl;
    cout << "Players take turns starting with the dealer's left." << endl;
    cout << "The goal is to have the lowest card when everyone is down to their last card." << endl;
    cout << "Players can match or play a higher card; if unable, they must play their lowest card." << endl;
    cout << "The winner of each round starts the next round by playing any card of their choice." << endl;
    cout << "The game continues for 4 rounds, and the player with the lowest card at the end wins!" << endl;
    cout << "No cheating! Have fun!" << endl;
}

int getNumberOfPlayers() {
    int numPlayers;
    do {
        cout << "Enter the number of players (2-4): ";
        cin >> numPlayers;
        if (numPlayers < 2 || numPlayers > 4) {
            cout << "Invalid number of players. Please enter a value between 2 and 4." << endl;
        }
    } while (numPlayers < 2 || numPlayers > 4);
    return numPlayers;
}

void GAMESTART(int numPlayers) {
    int playerPoints[4] = {0}; // Array to store points for each player

    cout << "Game has started with " << numPlayers << " players!\n" << endl;

    // Array of all 52 cards in a French-suited deck
string cards[] = {

    "Card: 2 of Diamonds", "Card: 2 of Clubs", "Card: 2 of Hearts", "Card: 2 of Spades",
    "Card: 3 of Diamonds", "Card: 3 of Clubs", "Card: 3 of Hearts", "Card: 3 of Spades",
    "Card: 4 of Diamonds", "Card: 4 of Clubs", "Card: 4 of Hearts", "Card: 4 of Spades",
    "Card: 5 of Diamonds", "Card: 5 of Clubs", "Card: 5 of Hearts", "Card: 5 of Spades",
    "Card: 6 of Diamonds", "Card: 6 of Clubs", "Card: 6 of Hearts", "Card: 6 of Spades",
    "Card: 7 of Diamonds", "Card: 7 of Clubs", "Card: 7 of Hearts", "Card: 7 of Spades",
    "Card: 8 of Diamonds", "Card: 8 of Clubs", "Card: 8 of Hearts", "Card: 8 of Spades",
    "Card: 9 of Diamonds", "Card: 9 of Clubs", "Card: 9 of Hearts", "Card: 9 of Spades",
    "Card: 10 of Diamonds", "Card: 10 of Clubs", "Card: 10 of Hearts", "Card: 10 of Spades",
    "King (Spade)", "King (Diamond)", "King (Club)", "King (Heart)",
    "Queen (Spade)", "Queen (Diamond)", "Queen (Club)", "Queen (Heart)",
    "Jack (Spade)", "Jack (Diamond)", "Jack (Club)", "Jack (Heart)",
    "Ace (Spade)", "Ace (Diamond)", "Ace (Club)", "Ace (Heart)"
};
string deck[52];

// Populate the deck
int index = 0;
for (int i = 0; i < 4; i++) { 
    for (int j = 0; j < 13; j++) { 
        deck[index++] = cards[i * 13 + j]; 
    }
}


    shuffleDeck(deck, 52);

    cout << "Game starting in 3..." << endl;
    delay(1);
    cout << "                 2..." << endl;
    delay(1);
    cout << "                 1..." << endl;
    delay(2);
    cout << "             Game starting!" << endl;
    delay(2);
     system("cls");
      cout << "\n\n" << endl;
    cout << " .----------------.  .----------------.  .----------------.  .----------------.  .----------------. " << endl;
    cout << "| .--------------. || .--------------. || .--------------. || .--------------. || .--------------. |" << endl;
    cout << "| |    ______    | || | _____  _____ | || |  _______     | || |  ___  ____   | || |      __      | |" << endl;
    cout << "| |  .' ___  |   | || ||_   _||_   _|| || | |_   __ \\    | || | |_  ||_  _|  | || |     /  \\     | |" << endl;
    cout << "| | / .'   \\_|   | || |  | |    | |  | || |   | |__) |   | || |   | |_/ /    | || |    / /\\ \\    | |" << endl;
    cout << "| | | |    ____  | || |  | '    ' |  | || |   |  __ /    | || |   |  __'.    | || |   / ____ \\   | |" << endl;
    cout << "| | \\ `.___]  _| | || |   \\ `--' /   | || |  _| |  \\ \\_  | || |  _| |  \\ \\_  | || | _/ /    \\ \\_ | |" << endl;
    cout << "| |  `._____.'   | || |    `.__.'    | || | |____| |___| | || | |____||____| | || ||____|  |____|| |" << endl;
    cout << "| |              | || |              | || |              | || |              | || |              | |" << endl;
    cout << "| '--------------' || '--------------' || '--------------' || '--------------' || '--------------' |" << endl;
    cout << " '----------------'  '----------------'  '----------------'  '----------------'  '----------------' " << endl;
    cout << "\n\n" << endl;
    cout << "Game has started with " << numPlayers << " players!\n" << endl;
    // Call the FirstRound function
    FirstRound(numPlayers, deck, playerPoints);
}

void FirstRound(int numPlayers, string deck[], int playerPoints[]) {
    string playerHand[6]; // Array to store the first player's hand
    string aiHands[4][6]; // 2D array to store the hands of up to 4 AI players
    string aiPlayedCards[4]; // Array to store the cards played by AI players
    int deckIndex = 0;       // Index to track cards dealt from the deck

    // Loop through each player to deal cards
    for (int player = 1; player <= numPlayers; player++) {
        cout << "Player " << player;
        if (player == 1) {
            cout << " (You)";
        }
        cout << " draws: " << endl;
        delay(1);

        // Determine the number of cards each player gets
        int cardsToDraw = 6;


        // Assign cards to the current player
        for (int card = 0; card < cardsToDraw; card++) {
            if (deckIndex >= 52) {
                cout << "No more cards left in the deck!" << endl;
                return; // Exit if there are no more cards
            }

            if (player == 1) {
                playerHand[card] = deck[deckIndex]; // Store cards in the player's hand
            } else {
                aiHands[player - 2][card] = deck[deckIndex]; // Store cards in the AI player's hand
            }
            cout << deck[deckIndex];
            if (card < cardsToDraw - 1) cout << ", "; // Add a comma between cards
            deckIndex++; // Move to the next card in the deck
        }
        cout << endl;

        delay(1);
    }

    // Simulate AI players' actions (choose cards but don't reveal yet)
    for (int player = 2; player <= numPlayers; player++) {
        cout << "AI Player " << player << " is thinking...\n";
        delay(1);

        // AI picks a random card from their hand
        int aiCardIndex = rand() % 6; // AI has 6 cards
        aiPlayedCards[player - 2] = aiHands[player - 2][aiCardIndex]; // Store the chosen card
        cout << "AI Player " << player << " has chosen their card.\n";
        delay(1);
    }

    // Player's turn: Choose and show their card
    cout << "\nYour turn! Choose which card to play:\n";
    int chosenCardIndex = CHOOSEYOURCARD(playerHand, 6);
    cout << "You played: " << playerHand[chosenCardIndex] << endl;

    delay(2);

    // Reveal the AI players' chosen cards
    cout << "\nLets see how you did against AI!\n\n";
    for (int player = 2; player <= numPlayers; player++) {
        cout << "AI Player " << player << " played: " << aiPlayedCards[player - 2] << endl;
        delay(1);
    }

    // After all players have chosen their cards

string playedCards[4]; // Array to store the played cards

// Store the human player's card
playedCards[0] = playerHand[chosenCardIndex];

// Store the AI players' cards
for (int i = 1; i < numPlayers; i++) {
    playedCards[i] = aiPlayedCards[i - 1];

}

    int winner = determineWinner(playedCards, numPlayers);
    playerPoints[winner]++; // Increment the winner's points

    cout << "Player " << (winner + 1) << " now has " << playerPoints[winner] << " points." << endl;
}

void delay(int seconds) {
    clock_t start_time = clock();
    while (clock() < start_time + seconds * CLOCKS_PER_SEC) {
        // Busy-wait loop
    }
}

int CHOOSEYOURCARD(string playerHand[], int handSize) {
    int cardChoice;

    // Display the player's hand
    cout << "\nYour cards are:" << endl;
    for (int i = 0; i < handSize; i++) {
        cout << i + 1 << ": " << playerHand[i] << endl; // Show card index starting from 1
    }

    // Prompt the player to choose a card
    do {
        cout << "Choose a card to play (1-" << handSize << "): ";
        cin >> cardChoice;

        if (cardChoice < 1 || cardChoice > handSize) {
            cout << "Invalid choice. Please choose a valid card number." << endl;
        }
    } while (cardChoice < 1 || cardChoice > handSize);

    // Return the index of the chosen card (adjusted for 0-based indexing)
    return cardChoice - 1;

    
}

void shuffleDeck(string deck[], int size) {
    for (int i = size - 1; i > 0; i--) {
        int j = rand() % (i + 1); // Generate a random index
        swap(deck[i], deck[j]);  // Swap the current card with a random card
    }
}

int determineWinner(string playedCards[], int numPlayers) {
     int cardValues[4];


    for (int i = 0; i < numPlayers; i++) {
        if (
            playedCards[i] == "Card: 2 of Diamonds" ||
            playedCards[i] == "Card: 2 of Clubs" ||
            playedCards[i] == "Card: 2 of Hearts" ||
            playedCards[i] == "Card: 2 of Spades"
        )

        {
            cardValues[i] = 2;
        }
        else if (
            playedCards[i] == "Card: 3 of Diamonds" ||
            playedCards[i] == "Card: 3 of Clubs" ||
            playedCards[i] == "Card: 3 of Hearts" ||
            playedCards[i] == "Card: 3 of Spades"
        )
        {
            cardValues[i] = 3;
        }
        else if (
            playedCards[i] == "Card: 4 of Diamonds" ||
            playedCards[i] == "Card: 4 of Clubs" ||
            playedCards[i] == "Card: 4 of Hearts" ||
            playedCards[i] == "Card: 4 of Spades"
        )
        {
            cardValues[i] = 4;
        }

        else if (
            playedCards[i] == "Card: 5 of Diamonds" ||
            playedCards[i] == "Card: 5 of Clubs" ||
            playedCards[i] == "Card: 5 of Hearts" ||
            playedCards[i] == "Card: 5 of Spades"
        )
        {
            cardValues[i] = 5;
        }
        else if (
            playedCards[i] == "Card: 6 of Diamonds" ||
            playedCards[i] == "Card: 6 of Clubs" ||
            playedCards[i] == "Card: 6 of Hearts" ||
            playedCards[i] == "Card: 6 of Spades"
        )
        {
            cardValues[i] = 6;
        }
        else if (
            playedCards[i] == "Card: 7 of Diamonds" ||
            playedCards[i] == "Card: 7 of Clubs" ||
            playedCards[i] == "Card: 7 of Hearts" ||
            playedCards[i] == "Card: 7 of Spades"
        )
        {
            cardValues[i] = 7;
        }
        else if (
            playedCards[i] == "Card: 8 of Diamonds" ||
            playedCards[i] == "Card: 8 of Clubs" ||
            playedCards[i] == "Card: 8 of Hearts" ||
            playedCards[i] == "Card: 8 of Spades"
        )
        {
            cardValues[i] = 8;
        }
        else if (
            playedCards[i] == "Card: 9 of Diamonds" ||
            playedCards[i] == "Card: 9 of Clubs" ||
            playedCards[i] == "Card: 9 of Hearts" ||
            playedCards[i] == "Card: 9 of Spades"
        )
        {
            cardValues[i] = 9;
        }
        else if (
            playedCards[i] == "Card: 10 of Diamonds" ||
            playedCards[i] == "Card: 10 of Clubs" ||
            playedCards[i] == "Card: 10 of Hearts" ||
            playedCards[i] == "Card: 10 of Spades"
        )
        {
            cardValues[i] = 10;
        }
        else if (
            playedCards[i] == "King (Spade)" ||
            playedCards[i] == "King (Diamond)" ||
            playedCards[i] == "King (Club)" ||
            playedCards[i] == "King (Heart)"
        )
        {
            cardValues[i] = 13;
        }
        else if (
            playedCards[i] == "Queen (Spade)" ||
            playedCards[i] == "Queen (Diamond)" ||
            playedCards[i] == "Queen (Club)" ||
            playedCards[i] == "Queen (Heart)"
        )
        {
            cardValues[i] = 12;
        }
        else if (
            playedCards[i] == "Jack (Spade)" ||
            playedCards[i] == "Jack (Diamond)" ||
            playedCards[i] == "Jack (Club)" ||
            playedCards[i] == "Jack (Heart)"
        )
        {
            cardValues[i] = 11;
        }
        else if (
            playedCards[i] == "Ace (Spade)" ||
            playedCards[i] == "Ace (Diamond)" ||
            playedCards[i] == "Ace (Club)" ||
            playedCards[i] == "Ace (Heart)"
        ) {
            cardValues[i] = 14;
        } else {
            cardValues[i] = 0; // fallback for unknown cards
        }
    }

     // Find the highest value and the winner
    int maxVal = cardValues[0];
    int winner = 0;
    for (int i = 1; i < numPlayers; i++) {
        if (cardValues[i] > maxVal) {
            maxVal = cardValues[i];
            winner = i;
        }
}

       cout << "Player " << (winner + 1) << " wins the round with " << playedCards[winner] << "!" << endl;
    return winner; // index of the winner
}
void OtherRounds(int numPlayers, string deck[], int playerPoints[]){
    // Placeholder for other rounds logic
    cout << "Other rounds logic goes here." << endl;
    // You can implement the logic for subsequent rounds here
}
